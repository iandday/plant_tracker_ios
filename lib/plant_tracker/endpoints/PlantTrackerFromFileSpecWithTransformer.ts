/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Plant Tracker API
 * API for interacting with the Plant Tracker application
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
  ActivityOut,
  AreaIn,
  AreaOut,
  AreaPatch,
  BulkPlantCreateResponse,
  DeleteStatus,
  EntryOut,
  LocationIn,
  LocationOut,
  LocationPatch,
  PlantOut,
  RegEnabledSchema,
  RegisterIn,
  TokenObtainPair,
  TokenObtainPairOut,
  TokenRefreshInputSchema,
  TokenRefreshPairOut,
  TrackerApiViewBulkBulkCreatePlantBody,
  TrackerApiViewEntryCreateEntryBody,
  TrackerApiViewEntryPostEntryBody,
  TrackerApiViewPlantCreatePlantBody,
  TrackerApiViewPlantListPlantsParams,
  TrackerApiViewPlantPostPlantBody,
  TrackerApiViewSearchSearchEntryParams,
  TrackerApiViewSearchSearchPlantParams,
  UserSchema,
} from "../model";
import { customInstance } from "../mutator/custom-instance";
import type { ErrorType } from "../mutator/custom-instance";

/**
 * Location
 * @summary List Locations
 */
export const trackerApiViewLocationListLocations = (signal?: AbortSignal) => {
  return customInstance<LocationOut[]>({
    url: `/api/location/location`,
    method: "GET",
    signal,
  });
};

export const getTrackerApiViewLocationListLocationsQueryKey = () => {
  return [`/api/location/location`] as const;
};

export const getTrackerApiViewLocationListLocationsQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewLocationListLocationsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>
  > = ({ signal }) => trackerApiViewLocationListLocations(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewLocationListLocationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>
>;
export type TrackerApiViewLocationListLocationsQueryError = ErrorType<unknown>;

/**
 * @summary List Locations
 */
export const useTrackerApiViewLocationListLocations = <
  TData = Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getTrackerApiViewLocationListLocationsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewLocationListLocationsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewLocationListLocationsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>
  > = ({ signal }) => trackerApiViewLocationListLocations(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewLocationListLocationsSuspenseQueryResult =
  NonNullable<Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>>;
export type TrackerApiViewLocationListLocationsSuspenseQueryError =
  ErrorType<unknown>;

/**
 * @summary List Locations
 */
export const useTrackerApiViewLocationListLocationsSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewLocationListLocations>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getTrackerApiViewLocationListLocationsSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Location
 * @summary Create Location
 */
export const trackerApiViewLocationCreateLocation = (
  locationIn: LocationIn,
) => {
  return customInstance<LocationOut>({
    url: `/api/location/location`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: locationIn,
  });
};

export const getTrackerApiViewLocationCreateLocationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewLocationCreateLocation>>,
    TError,
    { data: LocationIn },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewLocationCreateLocation>>,
  TError,
  { data: LocationIn },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewLocationCreateLocation>>,
    { data: LocationIn }
  > = (props) => {
    const { data } = props ?? {};

    return trackerApiViewLocationCreateLocation(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewLocationCreateLocationMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewLocationCreateLocation>>
>;
export type TrackerApiViewLocationCreateLocationMutationBody = LocationIn;
export type TrackerApiViewLocationCreateLocationMutationError =
  ErrorType<unknown>;

/**
 * @summary Create Location
 */
export const useTrackerApiViewLocationCreateLocation = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewLocationCreateLocation>>,
    TError,
    { data: LocationIn },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewLocationCreateLocation>>,
  TError,
  { data: LocationIn },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewLocationCreateLocationMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Location
 * @summary Get Location
 */
export const trackerApiViewLocationGetLocation = (
  locationId: string | undefined | null,
  signal?: AbortSignal,
) => {
  return customInstance<LocationOut>({
    url: `/api/location/${locationId}`,
    method: "GET",
    signal,
  });
};

export const getTrackerApiViewLocationGetLocationQueryKey = (
  locationId: string | undefined | null,
) => {
  return [`/api/location/${locationId}`] as const;
};

export const getTrackerApiViewLocationGetLocationQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>,
  TError = ErrorType<unknown>,
>(
  locationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTrackerApiViewLocationGetLocationQueryKey(locationId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>
  > = ({ signal }) => trackerApiViewLocationGetLocation(locationId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!locationId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewLocationGetLocationQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>
>;
export type TrackerApiViewLocationGetLocationQueryError = ErrorType<unknown>;

/**
 * @summary Get Location
 */
export const useTrackerApiViewLocationGetLocation = <
  TData = Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>,
  TError = ErrorType<unknown>,
>(
  locationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewLocationGetLocationQueryOptions(
    locationId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewLocationGetLocationSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>,
  TError = ErrorType<unknown>,
>(
  locationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTrackerApiViewLocationGetLocationQueryKey(locationId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>
  > = ({ signal }) => trackerApiViewLocationGetLocation(locationId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!locationId,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewLocationGetLocationSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>
>;
export type TrackerApiViewLocationGetLocationSuspenseQueryError =
  ErrorType<unknown>;

/**
 * @summary Get Location
 */
export const useTrackerApiViewLocationGetLocationSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>,
  TError = ErrorType<unknown>,
>(
  locationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewLocationGetLocation>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewLocationGetLocationSuspenseQueryOptions(
    locationId,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Location
 * @summary Patch Location
 */
export const locationPatchLocation = (
  locationId: string | undefined | null,
  locationPatch: LocationPatch,
) => {
  return customInstance<LocationOut>({
    url: `/api/location/${locationId}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: locationPatch,
  });
};

export const getLocationPatchLocationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof locationPatchLocation>>,
    TError,
    { locationId: string; data: LocationPatch },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof locationPatchLocation>>,
  TError,
  { locationId: string; data: LocationPatch },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof locationPatchLocation>>,
    { locationId: string; data: LocationPatch }
  > = (props) => {
    const { locationId, data } = props ?? {};

    return locationPatchLocation(locationId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LocationPatchLocationMutationResult = NonNullable<
  Awaited<ReturnType<typeof locationPatchLocation>>
>;
export type LocationPatchLocationMutationBody = LocationPatch;
export type LocationPatchLocationMutationError = ErrorType<unknown>;

/**
 * @summary Patch Location
 */
export const useLocationPatchLocation = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof locationPatchLocation>>,
    TError,
    { locationId: string; data: LocationPatch },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof locationPatchLocation>>,
  TError,
  { locationId: string; data: LocationPatch },
  TContext
> => {
  const mutationOptions = getLocationPatchLocationMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Location
 * @summary Delete Location
 */
export const trackerApiViewLocationDeleteLocation = (
  locationId: string | undefined | null,
) => {
  return customInstance<DeleteStatus>({
    url: `/api/location/${locationId}`,
    method: "DELETE",
  });
};

export const getTrackerApiViewLocationDeleteLocationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewLocationDeleteLocation>>,
    TError,
    { locationId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewLocationDeleteLocation>>,
  TError,
  { locationId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewLocationDeleteLocation>>,
    { locationId: string }
  > = (props) => {
    const { locationId } = props ?? {};

    return trackerApiViewLocationDeleteLocation(locationId);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewLocationDeleteLocationMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewLocationDeleteLocation>>
>;

export type TrackerApiViewLocationDeleteLocationMutationError =
  ErrorType<unknown>;

/**
 * @summary Delete Location
 */
export const useTrackerApiViewLocationDeleteLocation = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewLocationDeleteLocation>>,
    TError,
    { locationId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewLocationDeleteLocation>>,
  TError,
  { locationId: string },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewLocationDeleteLocationMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Arean
 * @summary List Areas
 */
export const trackerApiViewAreaListAreas = (signal?: AbortSignal) => {
  return customInstance<AreaOut[]>({
    url: `/api/area/area`,
    method: "GET",
    signal,
  });
};

export const getTrackerApiViewAreaListAreasQueryKey = () => {
  return [`/api/area/area`] as const;
};

export const getTrackerApiViewAreaListAreasQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewAreaListAreasQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>
  > = ({ signal }) => trackerApiViewAreaListAreas(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewAreaListAreasQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>
>;
export type TrackerApiViewAreaListAreasQueryError = ErrorType<unknown>;

/**
 * @summary List Areas
 */
export const useTrackerApiViewAreaListAreas = <
  TData = Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewAreaListAreasQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewAreaListAreasSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewAreaListAreasQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>
  > = ({ signal }) => trackerApiViewAreaListAreas(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewAreaListAreasSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>
>;
export type TrackerApiViewAreaListAreasSuspenseQueryError = ErrorType<unknown>;

/**
 * @summary List Areas
 */
export const useTrackerApiViewAreaListAreasSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewAreaListAreas>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getTrackerApiViewAreaListAreasSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Area
 * @summary Create Area
 */
export const trackerApiViewAreaCreateArea = (areaIn: AreaIn) => {
  return customInstance<AreaOut>({
    url: `/api/area/area`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: areaIn,
  });
};

export const getTrackerApiViewAreaCreateAreaMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewAreaCreateArea>>,
    TError,
    { data: AreaIn },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewAreaCreateArea>>,
  TError,
  { data: AreaIn },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewAreaCreateArea>>,
    { data: AreaIn }
  > = (props) => {
    const { data } = props ?? {};

    return trackerApiViewAreaCreateArea(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewAreaCreateAreaMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewAreaCreateArea>>
>;
export type TrackerApiViewAreaCreateAreaMutationBody = AreaIn;
export type TrackerApiViewAreaCreateAreaMutationError = ErrorType<unknown>;

/**
 * @summary Create Area
 */
export const useTrackerApiViewAreaCreateArea = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewAreaCreateArea>>,
    TError,
    { data: AreaIn },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewAreaCreateArea>>,
  TError,
  { data: AreaIn },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewAreaCreateAreaMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Area
 * @summary Get Area
 */
export const trackerApiViewAreaGetArea = (
  areaId: string | undefined | null,
  signal?: AbortSignal,
) => {
  return customInstance<AreaOut>({
    url: `/api/area/${areaId}`,
    method: "GET",
    signal,
  });
};

export const getTrackerApiViewAreaGetAreaQueryKey = (
  areaId: string | undefined | null,
) => {
  return [`/api/area/${areaId}`] as const;
};

export const getTrackerApiViewAreaGetAreaQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>,
  TError = ErrorType<unknown>,
>(
  areaId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewAreaGetAreaQueryKey(areaId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>
  > = ({ signal }) => trackerApiViewAreaGetArea(areaId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!areaId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewAreaGetAreaQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>
>;
export type TrackerApiViewAreaGetAreaQueryError = ErrorType<unknown>;

/**
 * @summary Get Area
 */
export const useTrackerApiViewAreaGetArea = <
  TData = Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>,
  TError = ErrorType<unknown>,
>(
  areaId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewAreaGetAreaQueryOptions(
    areaId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewAreaGetAreaSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>,
  TError = ErrorType<unknown>,
>(
  areaId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewAreaGetAreaQueryKey(areaId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>
  > = ({ signal }) => trackerApiViewAreaGetArea(areaId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!areaId,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewAreaGetAreaSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>
>;
export type TrackerApiViewAreaGetAreaSuspenseQueryError = ErrorType<unknown>;

/**
 * @summary Get Area
 */
export const useTrackerApiViewAreaGetAreaSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>,
  TError = ErrorType<unknown>,
>(
  areaId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewAreaGetArea>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewAreaGetAreaSuspenseQueryOptions(
    areaId,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Area
 * @summary Patch Area
 */
export const areaPatchArea = (
  areaId: string | undefined | null,
  areaPatch: AreaPatch,
) => {
  return customInstance<AreaOut>({
    url: `/api/area/${areaId}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: areaPatch,
  });
};

export const getAreaPatchAreaMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof areaPatchArea>>,
    TError,
    { areaId: string; data: AreaPatch },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof areaPatchArea>>,
  TError,
  { areaId: string; data: AreaPatch },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof areaPatchArea>>,
    { areaId: string; data: AreaPatch }
  > = (props) => {
    const { areaId, data } = props ?? {};

    return areaPatchArea(areaId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AreaPatchAreaMutationResult = NonNullable<
  Awaited<ReturnType<typeof areaPatchArea>>
>;
export type AreaPatchAreaMutationBody = AreaPatch;
export type AreaPatchAreaMutationError = ErrorType<unknown>;

/**
 * @summary Patch Area
 */
export const useAreaPatchArea = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof areaPatchArea>>,
    TError,
    { areaId: string; data: AreaPatch },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof areaPatchArea>>,
  TError,
  { areaId: string; data: AreaPatch },
  TContext
> => {
  const mutationOptions = getAreaPatchAreaMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Area
 * @summary Delete Area
 */
export const trackerApiViewAreaDeleteArea = (
  areaId: string | undefined | null,
) => {
  return customInstance<DeleteStatus>({
    url: `/api/area/${areaId}`,
    method: "DELETE",
  });
};

export const getTrackerApiViewAreaDeleteAreaMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewAreaDeleteArea>>,
    TError,
    { areaId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewAreaDeleteArea>>,
  TError,
  { areaId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewAreaDeleteArea>>,
    { areaId: string }
  > = (props) => {
    const { areaId } = props ?? {};

    return trackerApiViewAreaDeleteArea(areaId);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewAreaDeleteAreaMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewAreaDeleteArea>>
>;

export type TrackerApiViewAreaDeleteAreaMutationError = ErrorType<unknown>;

/**
 * @summary Delete Area
 */
export const useTrackerApiViewAreaDeleteArea = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewAreaDeleteArea>>,
    TError,
    { areaId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewAreaDeleteArea>>,
  TError,
  { areaId: string },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewAreaDeleteAreaMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary New Token
 */
export const trackerApiViewUserNewToken = (
  tokenObtainPair: TokenObtainPair,
) => {
  return customInstance<TokenObtainPairOut>({
    url: `/api/user/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: tokenObtainPair,
  });
};

export const getTrackerApiViewUserNewTokenMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewUserNewToken>>,
    TError,
    { data: TokenObtainPair },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewUserNewToken>>,
  TError,
  { data: TokenObtainPair },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewUserNewToken>>,
    { data: TokenObtainPair }
  > = (props) => {
    const { data } = props ?? {};

    return trackerApiViewUserNewToken(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewUserNewTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewUserNewToken>>
>;
export type TrackerApiViewUserNewTokenMutationBody = TokenObtainPair;
export type TrackerApiViewUserNewTokenMutationError = ErrorType<unknown>;

/**
 * @summary New Token
 */
export const useTrackerApiViewUserNewToken = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewUserNewToken>>,
    TError,
    { data: TokenObtainPair },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewUserNewToken>>,
  TError,
  { data: TokenObtainPair },
  TContext
> => {
  const mutationOptions = getTrackerApiViewUserNewTokenMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Refresh Token
 */
export const trackerApiViewUserRefreshToken = (
  tokenRefreshInputSchema: TokenRefreshInputSchema,
) => {
  return customInstance<TokenRefreshPairOut>({
    url: `/api/user/refresh`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: tokenRefreshInputSchema,
  });
};

export const getTrackerApiViewUserRefreshTokenMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewUserRefreshToken>>,
    TError,
    { data: TokenRefreshInputSchema },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewUserRefreshToken>>,
  TError,
  { data: TokenRefreshInputSchema },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewUserRefreshToken>>,
    { data: TokenRefreshInputSchema }
  > = (props) => {
    const { data } = props ?? {};

    return trackerApiViewUserRefreshToken(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewUserRefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewUserRefreshToken>>
>;
export type TrackerApiViewUserRefreshTokenMutationBody =
  TokenRefreshInputSchema;
export type TrackerApiViewUserRefreshTokenMutationError = ErrorType<unknown>;

/**
 * @summary Refresh Token
 */
export const useTrackerApiViewUserRefreshToken = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewUserRefreshToken>>,
    TError,
    { data: TokenRefreshInputSchema },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewUserRefreshToken>>,
  TError,
  { data: TokenRefreshInputSchema },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewUserRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Me
 */
export const trackerApiViewUserMe = (signal?: AbortSignal) => {
  return customInstance<UserSchema>({
    url: `/api/user/me`,
    method: "GET",
    signal,
  });
};

export const getTrackerApiViewUserMeQueryKey = () => {
  return [`/api/user/me`] as const;
};

export const getTrackerApiViewUserMeQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewUserMe>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewUserMe>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTrackerApiViewUserMeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewUserMe>>
  > = ({ signal }) => trackerApiViewUserMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewUserMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewUserMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewUserMe>>
>;
export type TrackerApiViewUserMeQueryError = ErrorType<unknown>;

/**
 * @summary Me
 */
export const useTrackerApiViewUserMe = <
  TData = Awaited<ReturnType<typeof trackerApiViewUserMe>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewUserMe>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewUserMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewUserMeSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewUserMe>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewUserMe>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTrackerApiViewUserMeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewUserMe>>
  > = ({ signal }) => trackerApiViewUserMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewUserMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewUserMeSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewUserMe>>
>;
export type TrackerApiViewUserMeSuspenseQueryError = ErrorType<unknown>;

/**
 * @summary Me
 */
export const useTrackerApiViewUserMeSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewUserMe>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewUserMe>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewUserMeSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update Me
 */
export const trackerApiViewUserUpdateMe = (userSchema: UserSchema) => {
  return customInstance<UserSchema>({
    url: `/api/user/me`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: userSchema,
  });
};

export const getTrackerApiViewUserUpdateMeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewUserUpdateMe>>,
    TError,
    { data: UserSchema },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewUserUpdateMe>>,
  TError,
  { data: UserSchema },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewUserUpdateMe>>,
    { data: UserSchema }
  > = (props) => {
    const { data } = props ?? {};

    return trackerApiViewUserUpdateMe(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewUserUpdateMeMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewUserUpdateMe>>
>;
export type TrackerApiViewUserUpdateMeMutationBody = UserSchema;
export type TrackerApiViewUserUpdateMeMutationError = ErrorType<unknown>;

/**
 * @summary Update Me
 */
export const useTrackerApiViewUserUpdateMe = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewUserUpdateMe>>,
    TError,
    { data: UserSchema },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewUserUpdateMe>>,
  TError,
  { data: UserSchema },
  TContext
> => {
  const mutationOptions = getTrackerApiViewUserUpdateMeMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Reg Enabled
 */
export const trackerApiViewUserRegEnabled = (signal?: AbortSignal) => {
  return customInstance<RegEnabledSchema>({
    url: `/api/user/reg_enabled`,
    method: "GET",
    signal,
  });
};

export const getTrackerApiViewUserRegEnabledQueryKey = () => {
  return [`/api/user/reg_enabled`] as const;
};

export const getTrackerApiViewUserRegEnabledQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewUserRegEnabledQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>
  > = ({ signal }) => trackerApiViewUserRegEnabled(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewUserRegEnabledQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>
>;
export type TrackerApiViewUserRegEnabledQueryError = ErrorType<unknown>;

/**
 * @summary Reg Enabled
 */
export const useTrackerApiViewUserRegEnabled = <
  TData = Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewUserRegEnabledQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewUserRegEnabledSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewUserRegEnabledQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>
  > = ({ signal }) => trackerApiViewUserRegEnabled(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewUserRegEnabledSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>
>;
export type TrackerApiViewUserRegEnabledSuspenseQueryError = ErrorType<unknown>;

/**
 * @summary Reg Enabled
 */
export const useTrackerApiViewUserRegEnabledSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewUserRegEnabled>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getTrackerApiViewUserRegEnabledSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Register
 */
export const trackerApiViewUserRegister = (registerIn: RegisterIn) => {
  return customInstance<UserSchema>({
    url: `/api/user/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerIn,
  });
};

export const getTrackerApiViewUserRegisterMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewUserRegister>>,
    TError,
    { data: RegisterIn },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewUserRegister>>,
  TError,
  { data: RegisterIn },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewUserRegister>>,
    { data: RegisterIn }
  > = (props) => {
    const { data } = props ?? {};

    return trackerApiViewUserRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewUserRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewUserRegister>>
>;
export type TrackerApiViewUserRegisterMutationBody = RegisterIn;
export type TrackerApiViewUserRegisterMutationError = ErrorType<unknown>;

/**
 * @summary Register
 */
export const useTrackerApiViewUserRegister = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewUserRegister>>,
    TError,
    { data: RegisterIn },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewUserRegister>>,
  TError,
  { data: RegisterIn },
  TContext
> => {
  const mutationOptions = getTrackerApiViewUserRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Plant
 * @summary List Plants
 */
export const trackerApiViewPlantListPlants = (
  params?: TrackerApiViewPlantListPlantsParams,
  signal?: AbortSignal,
) => {
  return customInstance<PlantOut[]>({
    url: `/api/plant/plant`,
    method: "GET",
    params,
    signal,
  });
};

export const getTrackerApiViewPlantListPlantsQueryKey = (
  params?: TrackerApiViewPlantListPlantsParams,
) => {
  return [`/api/plant/plant`, ...(params ? [params] : [])] as const;
};

export const getTrackerApiViewPlantListPlantsQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewPlantListPlantsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewPlantListPlantsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>
  > = ({ signal }) => trackerApiViewPlantListPlants(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewPlantListPlantsQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>
>;
export type TrackerApiViewPlantListPlantsQueryError = ErrorType<unknown>;

/**
 * @summary List Plants
 */
export const useTrackerApiViewPlantListPlants = <
  TData = Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewPlantListPlantsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewPlantListPlantsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewPlantListPlantsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewPlantListPlantsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewPlantListPlantsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>
  > = ({ signal }) => trackerApiViewPlantListPlants(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewPlantListPlantsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>
>;
export type TrackerApiViewPlantListPlantsSuspenseQueryError =
  ErrorType<unknown>;

/**
 * @summary List Plants
 */
export const useTrackerApiViewPlantListPlantsSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewPlantListPlantsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewPlantListPlants>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewPlantListPlantsSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Plant
 * @summary Create Plant
 */
export const trackerApiViewPlantCreatePlant = (
  trackerApiViewPlantCreatePlantBody: TrackerApiViewPlantCreatePlantBody,
) => {
  const formData = new FormData();
  formData.append("area_id", trackerApiViewPlantCreatePlantBody.area_id);
  if (trackerApiViewPlantCreatePlantBody.purchase_date !== undefined) {
    formData.append(
      "purchase_date",
      trackerApiViewPlantCreatePlantBody.purchase_date,
    );
  }
  if (trackerApiViewPlantCreatePlantBody.graveyard !== undefined) {
    formData.append(
      "graveyard",
      trackerApiViewPlantCreatePlantBody.graveyard.toString(),
    );
  }
  if (trackerApiViewPlantCreatePlantBody.death_date !== undefined) {
    formData.append(
      "death_date",
      trackerApiViewPlantCreatePlantBody.death_date,
    );
  }
  formData.append("name", trackerApiViewPlantCreatePlantBody.name);
  if (trackerApiViewPlantCreatePlantBody.common_name !== undefined) {
    formData.append(
      "common_name",
      trackerApiViewPlantCreatePlantBody.common_name,
    );
  }
  if (trackerApiViewPlantCreatePlantBody.scientific_name !== undefined) {
    formData.append(
      "scientific_name",
      trackerApiViewPlantCreatePlantBody.scientific_name,
    );
  }
  if (trackerApiViewPlantCreatePlantBody.notes !== undefined) {
    formData.append("notes", trackerApiViewPlantCreatePlantBody.notes);
  }
  if (trackerApiViewPlantCreatePlantBody.file !== undefined) {
    formData.append("file", trackerApiViewPlantCreatePlantBody.file);
  }

  return customInstance<PlantOut>({
    url: `/api/plant/plant`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getTrackerApiViewPlantCreatePlantMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewPlantCreatePlant>>,
    TError,
    { data: TrackerApiViewPlantCreatePlantBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewPlantCreatePlant>>,
  TError,
  { data: TrackerApiViewPlantCreatePlantBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewPlantCreatePlant>>,
    { data: TrackerApiViewPlantCreatePlantBody }
  > = (props) => {
    const { data } = props ?? {};

    return trackerApiViewPlantCreatePlant(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewPlantCreatePlantMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewPlantCreatePlant>>
>;
export type TrackerApiViewPlantCreatePlantMutationBody =
  TrackerApiViewPlantCreatePlantBody;
export type TrackerApiViewPlantCreatePlantMutationError = ErrorType<unknown>;

/**
 * @summary Create Plant
 */
export const useTrackerApiViewPlantCreatePlant = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewPlantCreatePlant>>,
    TError,
    { data: TrackerApiViewPlantCreatePlantBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewPlantCreatePlant>>,
  TError,
  { data: TrackerApiViewPlantCreatePlantBody },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewPlantCreatePlantMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Plant
 * @summary Get Plant
 */
export const trackerApiViewPlantGetPlant = (
  plantId: string | undefined | null,
  signal?: AbortSignal,
) => {
  return customInstance<PlantOut>({
    url: `/api/plant/${plantId}`,
    method: "GET",
    signal,
  });
};

export const getTrackerApiViewPlantGetPlantQueryKey = (
  plantId: string | undefined | null,
) => {
  return [`/api/plant/${plantId}`] as const;
};

export const getTrackerApiViewPlantGetPlantQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>,
  TError = ErrorType<unknown>,
>(
  plantId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewPlantGetPlantQueryKey(plantId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>
  > = ({ signal }) => trackerApiViewPlantGetPlant(plantId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!plantId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewPlantGetPlantQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>
>;
export type TrackerApiViewPlantGetPlantQueryError = ErrorType<unknown>;

/**
 * @summary Get Plant
 */
export const useTrackerApiViewPlantGetPlant = <
  TData = Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>,
  TError = ErrorType<unknown>,
>(
  plantId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewPlantGetPlantQueryOptions(
    plantId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewPlantGetPlantSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>,
  TError = ErrorType<unknown>,
>(
  plantId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewPlantGetPlantQueryKey(plantId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>
  > = ({ signal }) => trackerApiViewPlantGetPlant(plantId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!plantId,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewPlantGetPlantSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>
>;
export type TrackerApiViewPlantGetPlantSuspenseQueryError = ErrorType<unknown>;

/**
 * @summary Get Plant
 */
export const useTrackerApiViewPlantGetPlantSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>,
  TError = ErrorType<unknown>,
>(
  plantId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewPlantGetPlant>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewPlantGetPlantSuspenseQueryOptions(
    plantId,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Plant
 * @summary Post Plant
 */
export const trackerApiViewPlantPostPlant = (
  plantId: string | undefined | null,
  trackerApiViewPlantPostPlantBody: TrackerApiViewPlantPostPlantBody,
) => {
  const formData = new FormData();
  if (trackerApiViewPlantPostPlantBody.purchase_date !== undefined) {
    formData.append(
      "purchase_date",
      trackerApiViewPlantPostPlantBody.purchase_date,
    );
  }
  if (trackerApiViewPlantPostPlantBody.graveyard !== undefined) {
    formData.append(
      "graveyard",
      trackerApiViewPlantPostPlantBody.graveyard.toString(),
    );
  }
  if (trackerApiViewPlantPostPlantBody.death_date !== undefined) {
    formData.append("death_date", trackerApiViewPlantPostPlantBody.death_date);
  }
  if (trackerApiViewPlantPostPlantBody.name !== undefined) {
    formData.append("name", trackerApiViewPlantPostPlantBody.name);
  }
  if (trackerApiViewPlantPostPlantBody.common_name !== undefined) {
    formData.append(
      "common_name",
      trackerApiViewPlantPostPlantBody.common_name,
    );
  }
  if (trackerApiViewPlantPostPlantBody.scientific_name !== undefined) {
    formData.append(
      "scientific_name",
      trackerApiViewPlantPostPlantBody.scientific_name,
    );
  }
  if (trackerApiViewPlantPostPlantBody.notes !== undefined) {
    formData.append("notes", trackerApiViewPlantPostPlantBody.notes);
  }
  if (trackerApiViewPlantPostPlantBody.area_id !== undefined) {
    formData.append("area_id", trackerApiViewPlantPostPlantBody.area_id);
  }
  if (trackerApiViewPlantPostPlantBody.file !== undefined) {
    formData.append("file", trackerApiViewPlantPostPlantBody.file);
  }

  return customInstance<PlantOut>({
    url: `/api/plant/${plantId}`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getTrackerApiViewPlantPostPlantMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewPlantPostPlant>>,
    TError,
    { plantId: string; data: TrackerApiViewPlantPostPlantBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewPlantPostPlant>>,
  TError,
  { plantId: string; data: TrackerApiViewPlantPostPlantBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewPlantPostPlant>>,
    { plantId: string; data: TrackerApiViewPlantPostPlantBody }
  > = (props) => {
    const { plantId, data } = props ?? {};

    return trackerApiViewPlantPostPlant(plantId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewPlantPostPlantMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewPlantPostPlant>>
>;
export type TrackerApiViewPlantPostPlantMutationBody =
  TrackerApiViewPlantPostPlantBody;
export type TrackerApiViewPlantPostPlantMutationError = ErrorType<unknown>;

/**
 * @summary Post Plant
 */
export const useTrackerApiViewPlantPostPlant = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewPlantPostPlant>>,
    TError,
    { plantId: string; data: TrackerApiViewPlantPostPlantBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewPlantPostPlant>>,
  TError,
  { plantId: string; data: TrackerApiViewPlantPostPlantBody },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewPlantPostPlantMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Plant
 * @summary Delete Plant
 */
export const trackerApiViewPlantDeletePlant = (
  plantId: string | undefined | null,
) => {
  return customInstance<DeleteStatus>({
    url: `/api/plant/${plantId}`,
    method: "DELETE",
  });
};

export const getTrackerApiViewPlantDeletePlantMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewPlantDeletePlant>>,
    TError,
    { plantId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewPlantDeletePlant>>,
  TError,
  { plantId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewPlantDeletePlant>>,
    { plantId: string }
  > = (props) => {
    const { plantId } = props ?? {};

    return trackerApiViewPlantDeletePlant(plantId);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewPlantDeletePlantMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewPlantDeletePlant>>
>;

export type TrackerApiViewPlantDeletePlantMutationError = ErrorType<unknown>;

/**
 * @summary Delete Plant
 */
export const useTrackerApiViewPlantDeletePlant = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewPlantDeletePlant>>,
    TError,
    { plantId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewPlantDeletePlant>>,
  TError,
  { plantId: string },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewPlantDeletePlantMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Entry
 * @summary List Entries
 */
export const trackerApiViewEntryListEntries = (signal?: AbortSignal) => {
  return customInstance<EntryOut[]>({
    url: `/api/entry/entry`,
    method: "GET",
    signal,
  });
};

export const getTrackerApiViewEntryListEntriesQueryKey = () => {
  return [`/api/entry/entry`] as const;
};

export const getTrackerApiViewEntryListEntriesQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewEntryListEntriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>
  > = ({ signal }) => trackerApiViewEntryListEntries(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewEntryListEntriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>
>;
export type TrackerApiViewEntryListEntriesQueryError = ErrorType<unknown>;

/**
 * @summary List Entries
 */
export const useTrackerApiViewEntryListEntries = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewEntryListEntriesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewEntryListEntriesSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewEntryListEntriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>
  > = ({ signal }) => trackerApiViewEntryListEntries(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewEntryListEntriesSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>
>;
export type TrackerApiViewEntryListEntriesSuspenseQueryError =
  ErrorType<unknown>;

/**
 * @summary List Entries
 */
export const useTrackerApiViewEntryListEntriesSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewEntryListEntries>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getTrackerApiViewEntryListEntriesSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Entry
 * @summary Create Entry
 */
export const trackerApiViewEntryCreateEntry = (
  trackerApiViewEntryCreateEntryBody: TrackerApiViewEntryCreateEntryBody,
) => {
  const formData = new FormData();
  trackerApiViewEntryCreateEntryBody.activities.forEach((value) =>
    formData.append("activities", value),
  );
  formData.append("Timestamp", trackerApiViewEntryCreateEntryBody.Timestamp);
  formData.append("plant_id", trackerApiViewEntryCreateEntryBody.plant_id);
  if (trackerApiViewEntryCreateEntryBody.notes !== undefined) {
    formData.append("notes", trackerApiViewEntryCreateEntryBody.notes);
  }
  if (trackerApiViewEntryCreateEntryBody.plant_health !== undefined) {
    formData.append(
      "plant_health",
      trackerApiViewEntryCreateEntryBody.plant_health,
    );
  }
  if (trackerApiViewEntryCreateEntryBody.file !== undefined) {
    formData.append("file", trackerApiViewEntryCreateEntryBody.file);
  }

  return customInstance<EntryOut>({
    url: `/api/entry/entry`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getTrackerApiViewEntryCreateEntryMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryCreateEntry>>,
    TError,
    { data: TrackerApiViewEntryCreateEntryBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewEntryCreateEntry>>,
  TError,
  { data: TrackerApiViewEntryCreateEntryBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewEntryCreateEntry>>,
    { data: TrackerApiViewEntryCreateEntryBody }
  > = (props) => {
    const { data } = props ?? {};

    return trackerApiViewEntryCreateEntry(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewEntryCreateEntryMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewEntryCreateEntry>>
>;
export type TrackerApiViewEntryCreateEntryMutationBody =
  TrackerApiViewEntryCreateEntryBody;
export type TrackerApiViewEntryCreateEntryMutationError = ErrorType<unknown>;

/**
 * @summary Create Entry
 */
export const useTrackerApiViewEntryCreateEntry = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryCreateEntry>>,
    TError,
    { data: TrackerApiViewEntryCreateEntryBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewEntryCreateEntry>>,
  TError,
  { data: TrackerApiViewEntryCreateEntryBody },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewEntryCreateEntryMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Entry
 * @summary Get Plant Entries
 */
export const trackerApiViewEntryGetPlantEntries = (
  plantId: string | undefined | null,
  signal?: AbortSignal,
) => {
  return customInstance<EntryOut[]>({
    url: `/api/entry/plant/${plantId}`,
    method: "GET",
    signal,
  });
};

export const getTrackerApiViewEntryGetPlantEntriesQueryKey = (
  plantId: string | undefined | null,
) => {
  return [`/api/entry/plant/${plantId}`] as const;
};

export const getTrackerApiViewEntryGetPlantEntriesQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>,
  TError = ErrorType<unknown>,
>(
  plantId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTrackerApiViewEntryGetPlantEntriesQueryKey(plantId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>
  > = ({ signal }) => trackerApiViewEntryGetPlantEntries(plantId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!plantId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewEntryGetPlantEntriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>
>;
export type TrackerApiViewEntryGetPlantEntriesQueryError = ErrorType<unknown>;

/**
 * @summary Get Plant Entries
 */
export const useTrackerApiViewEntryGetPlantEntries = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>,
  TError = ErrorType<unknown>,
>(
  plantId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewEntryGetPlantEntriesQueryOptions(
    plantId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewEntryGetPlantEntriesSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>,
  TError = ErrorType<unknown>,
>(
  plantId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTrackerApiViewEntryGetPlantEntriesQueryKey(plantId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>
  > = ({ signal }) => trackerApiViewEntryGetPlantEntries(plantId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!plantId,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewEntryGetPlantEntriesSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>
>;
export type TrackerApiViewEntryGetPlantEntriesSuspenseQueryError =
  ErrorType<unknown>;

/**
 * @summary Get Plant Entries
 */
export const useTrackerApiViewEntryGetPlantEntriesSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>,
  TError = ErrorType<unknown>,
>(
  plantId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewEntryGetPlantEntries>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getTrackerApiViewEntryGetPlantEntriesSuspenseQueryOptions(plantId, options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Entry
 * @summary Get Entry
 */
export const trackerApiViewEntryGetEntry = (
  entryId: string | undefined | null,
  signal?: AbortSignal,
) => {
  return customInstance<EntryOut>({
    url: `/api/entry/${entryId}`,
    method: "GET",
    signal,
  });
};

export const getTrackerApiViewEntryGetEntryQueryKey = (
  entryId: string | undefined | null,
) => {
  return [`/api/entry/${entryId}`] as const;
};

export const getTrackerApiViewEntryGetEntryQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>,
  TError = ErrorType<unknown>,
>(
  entryId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewEntryGetEntryQueryKey(entryId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>
  > = ({ signal }) => trackerApiViewEntryGetEntry(entryId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!entryId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewEntryGetEntryQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>
>;
export type TrackerApiViewEntryGetEntryQueryError = ErrorType<unknown>;

/**
 * @summary Get Entry
 */
export const useTrackerApiViewEntryGetEntry = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>,
  TError = ErrorType<unknown>,
>(
  entryId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewEntryGetEntryQueryOptions(
    entryId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewEntryGetEntrySuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>,
  TError = ErrorType<unknown>,
>(
  entryId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewEntryGetEntryQueryKey(entryId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>
  > = ({ signal }) => trackerApiViewEntryGetEntry(entryId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!entryId,
    ...queryOptions,
  } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewEntryGetEntrySuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>
>;
export type TrackerApiViewEntryGetEntrySuspenseQueryError = ErrorType<unknown>;

/**
 * @summary Get Entry
 */
export const useTrackerApiViewEntryGetEntrySuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>,
  TError = ErrorType<unknown>,
>(
  entryId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewEntryGetEntry>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewEntryGetEntrySuspenseQueryOptions(
    entryId,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Entry
 * @summary Post Entry
 */
export const trackerApiViewEntryPostEntry = (
  entryId: string | undefined | null,
  trackerApiViewEntryPostEntryBody: TrackerApiViewEntryPostEntryBody,
) => {
  const formData = new FormData();
  trackerApiViewEntryPostEntryBody.activities.forEach((value) =>
    formData.append("activities", value),
  );
  if (trackerApiViewEntryPostEntryBody.Timestamp !== undefined) {
    formData.append("Timestamp", trackerApiViewEntryPostEntryBody.Timestamp);
  }
  if (trackerApiViewEntryPostEntryBody.plant_id !== undefined) {
    formData.append("plant_id", trackerApiViewEntryPostEntryBody.plant_id);
  }
  if (trackerApiViewEntryPostEntryBody.notes !== undefined) {
    formData.append("notes", trackerApiViewEntryPostEntryBody.notes);
  }
  if (trackerApiViewEntryPostEntryBody.plant_health !== undefined) {
    formData.append(
      "plant_health",
      trackerApiViewEntryPostEntryBody.plant_health,
    );
  }
  if (trackerApiViewEntryPostEntryBody.file !== undefined) {
    formData.append("file", trackerApiViewEntryPostEntryBody.file);
  }

  return customInstance<EntryOut>({
    url: `/api/entry/${entryId}`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getTrackerApiViewEntryPostEntryMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryPostEntry>>,
    TError,
    { entryId: string; data: TrackerApiViewEntryPostEntryBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewEntryPostEntry>>,
  TError,
  { entryId: string; data: TrackerApiViewEntryPostEntryBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewEntryPostEntry>>,
    { entryId: string; data: TrackerApiViewEntryPostEntryBody }
  > = (props) => {
    const { entryId, data } = props ?? {};

    return trackerApiViewEntryPostEntry(entryId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewEntryPostEntryMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewEntryPostEntry>>
>;
export type TrackerApiViewEntryPostEntryMutationBody =
  TrackerApiViewEntryPostEntryBody;
export type TrackerApiViewEntryPostEntryMutationError = ErrorType<unknown>;

/**
 * @summary Post Entry
 */
export const useTrackerApiViewEntryPostEntry = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryPostEntry>>,
    TError,
    { entryId: string; data: TrackerApiViewEntryPostEntryBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewEntryPostEntry>>,
  TError,
  { entryId: string; data: TrackerApiViewEntryPostEntryBody },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewEntryPostEntryMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Entry
 * @summary Delete Entry
 */
export const trackerApiViewEntryDeleteEntry = (
  entryId: string | undefined | null,
) => {
  return customInstance<DeleteStatus>({
    url: `/api/entry/${entryId}`,
    method: "DELETE",
  });
};

export const getTrackerApiViewEntryDeleteEntryMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryDeleteEntry>>,
    TError,
    { entryId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewEntryDeleteEntry>>,
  TError,
  { entryId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewEntryDeleteEntry>>,
    { entryId: string }
  > = (props) => {
    const { entryId } = props ?? {};

    return trackerApiViewEntryDeleteEntry(entryId);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewEntryDeleteEntryMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewEntryDeleteEntry>>
>;

export type TrackerApiViewEntryDeleteEntryMutationError = ErrorType<unknown>;

/**
 * @summary Delete Entry
 */
export const useTrackerApiViewEntryDeleteEntry = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewEntryDeleteEntry>>,
    TError,
    { entryId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewEntryDeleteEntry>>,
  TError,
  { entryId: string },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewEntryDeleteEntryMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Activity
 * @summary List Activities
 */
export const trackerApiViewActivityListActivities = (signal?: AbortSignal) => {
  return customInstance<ActivityOut[]>({
    url: `/api/activity/activity`,
    method: "GET",
    signal,
  });
};

export const getTrackerApiViewActivityListActivitiesQueryKey = () => {
  return [`/api/activity/activity`] as const;
};

export const getTrackerApiViewActivityListActivitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewActivityListActivitiesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>
  > = ({ signal }) => trackerApiViewActivityListActivities(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewActivityListActivitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>
>;
export type TrackerApiViewActivityListActivitiesQueryError = ErrorType<unknown>;

/**
 * @summary List Activities
 */
export const useTrackerApiViewActivityListActivities = <
  TData = Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getTrackerApiViewActivityListActivitiesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewActivityListActivitiesSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTrackerApiViewActivityListActivitiesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>
  > = ({ signal }) => trackerApiViewActivityListActivities(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewActivityListActivitiesSuspenseQueryResult =
  NonNullable<Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>>;
export type TrackerApiViewActivityListActivitiesSuspenseQueryError =
  ErrorType<unknown>;

/**
 * @summary List Activities
 */
export const useTrackerApiViewActivityListActivitiesSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof trackerApiViewActivityListActivities>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getTrackerApiViewActivityListActivitiesSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Bulk
 * @summary Bulk Create Plant
 */
export const trackerApiViewBulkBulkCreatePlant = (
  trackerApiViewBulkBulkCreatePlantBody: TrackerApiViewBulkBulkCreatePlantBody,
) => {
  const formData = new FormData();
  formData.append("file", trackerApiViewBulkBulkCreatePlantBody.file);

  return customInstance<BulkPlantCreateResponse>({
    url: `/api/bulk/plant`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getTrackerApiViewBulkBulkCreatePlantMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewBulkBulkCreatePlant>>,
    TError,
    { data: TrackerApiViewBulkBulkCreatePlantBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof trackerApiViewBulkBulkCreatePlant>>,
  TError,
  { data: TrackerApiViewBulkBulkCreatePlantBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof trackerApiViewBulkBulkCreatePlant>>,
    { data: TrackerApiViewBulkBulkCreatePlantBody }
  > = (props) => {
    const { data } = props ?? {};

    return trackerApiViewBulkBulkCreatePlant(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TrackerApiViewBulkBulkCreatePlantMutationResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewBulkBulkCreatePlant>>
>;
export type TrackerApiViewBulkBulkCreatePlantMutationBody =
  TrackerApiViewBulkBulkCreatePlantBody;
export type TrackerApiViewBulkBulkCreatePlantMutationError = ErrorType<unknown>;

/**
 * @summary Bulk Create Plant
 */
export const useTrackerApiViewBulkBulkCreatePlant = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof trackerApiViewBulkBulkCreatePlant>>,
    TError,
    { data: TrackerApiViewBulkBulkCreatePlantBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof trackerApiViewBulkBulkCreatePlant>>,
  TError,
  { data: TrackerApiViewBulkBulkCreatePlantBody },
  TContext
> => {
  const mutationOptions =
    getTrackerApiViewBulkBulkCreatePlantMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Search plant records
 * @summary Search Plant
 */
export const trackerApiViewSearchSearchPlant = (
  params?: TrackerApiViewSearchSearchPlantParams,
  signal?: AbortSignal,
) => {
  return customInstance<PlantOut[]>({
    url: `/api/search/plant`,
    method: "GET",
    params,
    signal,
  });
};

export const getTrackerApiViewSearchSearchPlantQueryKey = (
  params?: TrackerApiViewSearchSearchPlantParams,
) => {
  return [`/api/search/plant`, ...(params ? [params] : [])] as const;
};

export const getTrackerApiViewSearchSearchPlantQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewSearchSearchPlantParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTrackerApiViewSearchSearchPlantQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>
  > = ({ signal }) => trackerApiViewSearchSearchPlant(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewSearchSearchPlantQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>
>;
export type TrackerApiViewSearchSearchPlantQueryError = ErrorType<unknown>;

/**
 * @summary Search Plant
 */
export const useTrackerApiViewSearchSearchPlant = <
  TData = Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewSearchSearchPlantParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewSearchSearchPlantQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewSearchSearchPlantSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewSearchSearchPlantParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTrackerApiViewSearchSearchPlantQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>
  > = ({ signal }) => trackerApiViewSearchSearchPlant(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewSearchSearchPlantSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>
>;
export type TrackerApiViewSearchSearchPlantSuspenseQueryError =
  ErrorType<unknown>;

/**
 * @summary Search Plant
 */
export const useTrackerApiViewSearchSearchPlantSuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewSearchSearchPlantParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewSearchSearchPlant>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewSearchSearchPlantSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Search entry records
 * @summary Search Entry
 */
export const trackerApiViewSearchSearchEntry = (
  params?: TrackerApiViewSearchSearchEntryParams,
  signal?: AbortSignal,
) => {
  return customInstance<EntryOut[]>({
    url: `/api/search/entry`,
    method: "GET",
    params,
    signal,
  });
};

export const getTrackerApiViewSearchSearchEntryQueryKey = (
  params?: TrackerApiViewSearchSearchEntryParams,
) => {
  return [`/api/search/entry`, ...(params ? [params] : [])] as const;
};

export const getTrackerApiViewSearchSearchEntryQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewSearchSearchEntryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTrackerApiViewSearchSearchEntryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>
  > = ({ signal }) => trackerApiViewSearchSearchEntry(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewSearchSearchEntryQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>
>;
export type TrackerApiViewSearchSearchEntryQueryError = ErrorType<unknown>;

/**
 * @summary Search Entry
 */
export const useTrackerApiViewSearchSearchEntry = <
  TData = Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewSearchSearchEntryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewSearchSearchEntryQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getTrackerApiViewSearchSearchEntrySuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewSearchSearchEntryParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTrackerApiViewSearchSearchEntryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>
  > = ({ signal }) => trackerApiViewSearchSearchEntry(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackerApiViewSearchSearchEntrySuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>
>;
export type TrackerApiViewSearchSearchEntrySuspenseQueryError =
  ErrorType<unknown>;

/**
 * @summary Search Entry
 */
export const useTrackerApiViewSearchSearchEntrySuspense = <
  TData = Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>,
  TError = ErrorType<unknown>,
>(
  params?: TrackerApiViewSearchSearchEntryParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof trackerApiViewSearchSearchEntry>>,
        TError,
        TData
      >
    >;
  },
): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackerApiViewSearchSearchEntrySuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
